
(define dict
    (lambda (pairs)
        pairs))

(define get
  (lambda (dict key)
    (if (eq? dict '())
        (make-error)
        (if (and (pair? (car dict)) (eq? key (car (car dict))))
            (cdr (car dict))
            (get (cdr dict) key)))))

(define forall
  (lambda (pred lst)
    (if (eq? lst '())
        #t
        (and (pred (car lst))
             (forall pred (cdr lst))))))

(define dict?
  (lambda (x)
    (if (and (pair? x)
             (forall (lambda (p)
                       (pair? p))
                     x))
        #t
        #f)))


(define make-error
  (lambda ()
    'error))


(define is-error?
  (lambda (v)
    (eq? v 'error)))


(define bind
  (lambda (v f)
    (if (is-error? v)
        v
        (f v))))